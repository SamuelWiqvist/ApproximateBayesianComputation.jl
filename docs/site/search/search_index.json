{
    "docs": [
        {
            "location": "/",
            "text": "Documentation for ApproximateBayesianComputation.jl\n\n\nThis package contains some Approximate Bayesian computation algorithms.\n\n\n\n\nFeatures\n\n\nAlgorithms:\n\n\n\n\nABC rejection sampling (ABC-RS)\n\n\nABC Markov chain Monte Carlo (ABC-MCMC)\n\n\nABC population Monte Carlo (ABC-PMC)\n\n\n\n\nKernels:\n\n\n\n\nUniform\n\n\nGaussian\n\n\n\n\nDistance function(s):\n\n\n\n\n(Weighted) Euclidean distance",
            "title": "Introduction"
        },
        {
            "location": "/#documentation-for-approximatebayesiancomputationjl",
            "text": "This package contains some Approximate Bayesian computation algorithms.",
            "title": "Documentation for ApproximateBayesianComputation.jl"
        },
        {
            "location": "/#features",
            "text": "Algorithms:   ABC rejection sampling (ABC-RS)  ABC Markov chain Monte Carlo (ABC-MCMC)  ABC population Monte Carlo (ABC-PMC)   Kernels:   Uniform  Gaussian   Distance function(s):   (Weighted) Euclidean distance",
            "title": "Features"
        },
        {
            "location": "/examples/ex1/",
            "text": "Simple example\n\n\nLet us use the  ABC rejection sampling algorithm to learn the mean for a Normal distribution with known standard deviation, where the prior for unknown mean is a Normal distibution.\n\n\nLoad packages, and set up the model.\n\n\nusing\n \nApproximateBayesianComputation\n\n\nusing\n \nDistributions\n\n\n\n\u03bc\n \n=\n \n0\n \n# true value for the mean, the parameter that  we want to estimate\n\n\n\u03c3\n \n=\n \n1\n \n# known standard deviation\n\n\nn\n \n=\n \n100\n \n# nbr of observations\n\n\n\ny\n \n=\n \nrand\n(\nNormal\n(\n\u03bc\n,\n\u03c3\n),\n100\n)\n \n# generate some data\n\n\n\n# the prior is a normal distribution with \u03bc = 0.1, and \u03c3 = 1\n\n\nprior\n \n=\n \nNormal\n(\n0.1\n,\n \n1\n)\n\n\n\n\n\n\nDefine the functions needed for the ABC-RS algorithm.\n\n\n# function to sample from the prior\n\n\nsample_from_prior\n()\n \n=\n \nrand\n(\nprior\n)\n\n\n\n# function to generate data\n\n\ngenerate_data\n(\n\u03bc\n)\n \n=\n \nrand\n(\nNormal\n(\n\u03bc\n[\n1\n],\n\u03c3\n),\nn\n)\n\n\n\n# the summary statistics are the mean and the standard\n\n\n# deviation, i.e. the sufficient statistics for the data\n\n\ncalc_summary\n(\ny_star\n,\ny\n)\n \n=\n \n[\nmean\n(\ny_star\n);\n \nstd\n(\ny_star\n)]\n\n\n\n# distance function\n\n\n\u03c1\n(\ns_star\n,\n \ns\n)\n \n=\n \neuclidean_dist\n(\ns_star\n,\n \ns\n,\n \nones\n(\n2\n))\n\n\n\n\n\n\nSet up the ABC-RS problem.\n\n\nproblem\n \n=\n \nABCRS\n(\n10\n^\n6\n,\n\n                \n0.01\n,\n\n                \nData\n(\ny\n),\n\n                \n1\n,\n\n                \ncores\n \n=\n \n1\n,\n\n                \nprint_interval\n \n=\n \n10\n^\n5\n)\n\n\n\n\n\n\nRun ABC-RS.\n\n\napprox_posterior_samples\n \n=\n \nsample\n(\nproblem\n,\n\n                                  \nsample_from_prior\n,\n\n                                  \ngenerate_data\n,\n\n                                  \ncalc_summary\n,\n\n                                  \n\u03c1\n)\n\n\n\n\n\n\nCheck posterior quantile interval.\n\n\nposterior_quantile_interval\n \n=\n \nquantile_interval\n(\napprox_posterior_samples\n)",
            "title": "Simple example"
        },
        {
            "location": "/examples/ex1/#simple-example",
            "text": "Let us use the  ABC rejection sampling algorithm to learn the mean for a Normal distribution with known standard deviation, where the prior for unknown mean is a Normal distibution.  Load packages, and set up the model.  using   ApproximateBayesianComputation  using   Distributions  \u03bc   =   0   # true value for the mean, the parameter that  we want to estimate  \u03c3   =   1   # known standard deviation  n   =   100   # nbr of observations  y   =   rand ( Normal ( \u03bc , \u03c3 ), 100 )   # generate some data  # the prior is a normal distribution with \u03bc = 0.1, and \u03c3 = 1  prior   =   Normal ( 0.1 ,   1 )   Define the functions needed for the ABC-RS algorithm.  # function to sample from the prior  sample_from_prior ()   =   rand ( prior )  # function to generate data  generate_data ( \u03bc )   =   rand ( Normal ( \u03bc [ 1 ], \u03c3 ), n )  # the summary statistics are the mean and the standard  # deviation, i.e. the sufficient statistics for the data  calc_summary ( y_star , y )   =   [ mean ( y_star );   std ( y_star )]  # distance function  \u03c1 ( s_star ,   s )   =   euclidean_dist ( s_star ,   s ,   ones ( 2 ))   Set up the ABC-RS problem.  problem   =   ABCRS ( 10 ^ 6 , \n                 0.01 , \n                 Data ( y ), \n                 1 , \n                 cores   =   1 , \n                 print_interval   =   10 ^ 5 )   Run ABC-RS.  approx_posterior_samples   =   sample ( problem , \n                                   sample_from_prior , \n                                   generate_data , \n                                   calc_summary , \n                                   \u03c1 )   Check posterior quantile interval.  posterior_quantile_interval   =   quantile_interval ( approx_posterior_samples )",
            "title": "Simple example"
        },
        {
            "location": "/sec/abcrs/",
            "text": "ABC rejections sampling\n\n\nABC-RS object.\n\n\n#\n\n\nApproximateBayesianComputation.ABCRS\n \u2014 \nType\n.\n\n\nType for defining a problem for the ABC rejection sampling algorithm\n\n\nParameters:\n\n\n\n\nN::Integer\n nbr of iterations\n\n\n\u03f5::Real\n threshold\n\n\ndata::Data\n data\n\n\ndim_unknown::Integer\n nbr of unknown parameters\n\n\ncores::Integer\n nbr of course (default value 1)\n\n\nprint_interval::Integer\n print state of algorithm at every \nprint_interval\nth iteration (default value 1000)",
            "title": "ABC-RS"
        },
        {
            "location": "/sec/abcrs/#abc-rejections-sampling",
            "text": "ABC-RS object.  #  ApproximateBayesianComputation.ABCRS  \u2014  Type .  Type for defining a problem for the ABC rejection sampling algorithm  Parameters:   N::Integer  nbr of iterations  \u03f5::Real  threshold  data::Data  data  dim_unknown::Integer  nbr of unknown parameters  cores::Integer  nbr of course (default value 1)  print_interval::Integer  print state of algorithm at every  print_interval th iteration (default value 1000)",
            "title": "ABC rejections sampling"
        },
        {
            "location": "/sec/abcmcmc/",
            "text": "ABC Markov chain Monte Carlo\n\n\nABC-MCMC object.\n\n\nApproximateBayesianComputation.ABCRS",
            "title": "ABC-MCMC"
        },
        {
            "location": "/sec/abcmcmc/#abc-markov-chain-monte-carlo",
            "text": "ABC-MCMC object.  ApproximateBayesianComputation.ABCRS",
            "title": "ABC Markov chain Monte Carlo"
        },
        {
            "location": "/sec/abcpmc/",
            "text": "ABC Markov chain Monte Carlo\n\n\nABC-MCMC object.\n\n\n#\n\n\nApproximateBayesianComputation.ABCPMC\n \u2014 \nType\n.\n\n\nType for defining a problem for the ABC rejection sampling algorithm\n\n\nParameters:\n\n\n\n\nT::Integer\n nbr of iterations\n\n\nN::Integer\n nbr of samples in the population\n\n\n\u03f5::Real\n start threshold\n\n\ndata::Data\n data\n\n\ndim_unknown::Integer\n nbr of unknown parameters\n\n\ncores::Integer\n nbr of course (default value 1)\n\n\nprint_interval::Integer\n print state of algorithm at every \nprint_interval\nth iteration (default value 1000)",
            "title": "ABC-PMC"
        },
        {
            "location": "/sec/abcpmc/#abc-markov-chain-monte-carlo",
            "text": "ABC-MCMC object.  #  ApproximateBayesianComputation.ABCPMC  \u2014  Type .  Type for defining a problem for the ABC rejection sampling algorithm  Parameters:   T::Integer  nbr of iterations  N::Integer  nbr of samples in the population  \u03f5::Real  start threshold  data::Data  data  dim_unknown::Integer  nbr of unknown parameters  cores::Integer  nbr of course (default value 1)  print_interval::Integer  print state of algorithm at every  print_interval th iteration (default value 1000)",
            "title": "ABC Markov chain Monte Carlo"
        },
        {
            "location": "/sec/sample/",
            "text": "Sample\n\n\n#\n\n\nStatsBase.sample\n \u2014 \nFunction\n.\n\n\nsample(problem::ABCRS,\n  sample_from_prior::Function,\n  generate_data::Function,\n  calc_summary::Function,\n  \u03c1::Function,\n  kernel::Function)\n\n\n\n\n\nSample from the approximate posterior distribtuion using ABC rejection sampling.\n\n\nInput:\n\n\n\n\nproblem::ABCRS\n problem\n\n\nsample_from_prior::Function\n function to sample from the prior\n\n\ngenerate_data::Function\n function to generate data from the model\n\n\ncalc_summary::Function\n function to calculate summary statistics\n\n\n\u03c1::Function\n the distance function\n\n\n\n\nOutput:\n\n\n\n\nsamples_approx_posterior::Matrix\n samples from the approxiamte posterior\n\n\n\n\nsample(problem::ABCPMC,\n    sample_from_prior::Function,\n    evaluate_prior::Function,\n    generate_data::Function,\n    calc_summary::Function,\n    \u03c1::Function)\n\n\n\n\n\nSample from the approximate posterior distribtuion using PMC-ABC algorithm described in Adaptive approximate Bayesian computation< http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.313.3573&rep=rep1&type=pdf.\n\n\nInput:\n\n\n\n\nproblem::ABCPMC\n problem\n\n\nsample_from_prior::Function\n function to sample from the prior\n\n\ngenerate_data::Function\n function to generate data from the model\n\n\ncalc_summary::Function\n function to calculate summary statistics\n\n\n\u03c1::Function\n the distance function\n\n\n\n\nOutput:\n\n\n\n\n\u03b8_pop::Matrix\n last population\n\n\n\n\nsample\n(\nproblem\n:\n:ABCMCMC\n,\n\n      \nsample_from_prior\n:\n:Function\n,\n\n      \nevaluate_prior\n:\n:Function\n,\n\n      \ngenerate_data\n:\n:Function\n,\n\n      \ncalc_summary\n:\n:Function\n,\n\n      \n\u03c1\n:\n:Function\n;\n\n      \nkernel\n:\n:Function\n \n=\n \nuniform_kernel\n)\n\n\n\n\n\n\nSample from the approximate posterior distribtuion using ABC-MCMC.\n\n\nInput:\n\n\n\n\nproblem::ABCMCMC\n problem\n\n\nsample_from_prior::Function\n function to sample from the prior\n\n\nevaluate_prior::Function\n evaluate the prior\n\n\ngenerate_data::Function\n function to generate data\n\n\ncalc_summary::Function\n function to calculate summary statistics\n\n\n\u03c1::Function\n the distance function\n\n\nkernel::Function\n the kernel function\n\n\n\n\nOutput:\n\n\n\n\nchain::Matrix\n the chain genrated by the ABC-MCMC algorithm",
            "title": "sample"
        },
        {
            "location": "/sec/sample/#sample",
            "text": "#  StatsBase.sample  \u2014  Function .  sample(problem::ABCRS,\n  sample_from_prior::Function,\n  generate_data::Function,\n  calc_summary::Function,\n  \u03c1::Function,\n  kernel::Function)  Sample from the approximate posterior distribtuion using ABC rejection sampling.  Input:   problem::ABCRS  problem  sample_from_prior::Function  function to sample from the prior  generate_data::Function  function to generate data from the model  calc_summary::Function  function to calculate summary statistics  \u03c1::Function  the distance function   Output:   samples_approx_posterior::Matrix  samples from the approxiamte posterior   sample(problem::ABCPMC,\n    sample_from_prior::Function,\n    evaluate_prior::Function,\n    generate_data::Function,\n    calc_summary::Function,\n    \u03c1::Function)  Sample from the approximate posterior distribtuion using PMC-ABC algorithm described in Adaptive approximate Bayesian computation< http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.313.3573&rep=rep1&type=pdf.  Input:   problem::ABCPMC  problem  sample_from_prior::Function  function to sample from the prior  generate_data::Function  function to generate data from the model  calc_summary::Function  function to calculate summary statistics  \u03c1::Function  the distance function   Output:   \u03b8_pop::Matrix  last population   sample ( problem : :ABCMCMC , \n       sample_from_prior : :Function , \n       evaluate_prior : :Function , \n       generate_data : :Function , \n       calc_summary : :Function , \n       \u03c1 : :Function ; \n       kernel : :Function   =   uniform_kernel )   Sample from the approximate posterior distribtuion using ABC-MCMC.  Input:   problem::ABCMCMC  problem  sample_from_prior::Function  function to sample from the prior  evaluate_prior::Function  evaluate the prior  generate_data::Function  function to generate data  calc_summary::Function  function to calculate summary statistics  \u03c1::Function  the distance function  kernel::Function  the kernel function   Output:   chain::Matrix  the chain genrated by the ABC-MCMC algorithm",
            "title": "Sample"
        },
        {
            "location": "/sec/uniformkernel/",
            "text": "Gaussian kernel\n\n\n#\n\n\nApproximateBayesianComputation.uniform_kernel\n \u2014 \nFunction\n.\n\n\nuniform_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)\n\n\n\n\n\nThe Uniform kernel function.",
            "title": "Uniform kernel"
        },
        {
            "location": "/sec/uniformkernel/#gaussian-kernel",
            "text": "#  ApproximateBayesianComputation.uniform_kernel  \u2014  Function .  uniform_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)  The Uniform kernel function.",
            "title": "Gaussian kernel"
        },
        {
            "location": "/sec/gaussiankernel/",
            "text": "Gaussian kernel\n\n\nApproximateBayesianComputation.gaussian_kernel",
            "title": "Gaussian kernel"
        },
        {
            "location": "/sec/gaussiankernel/#gaussian-kernel",
            "text": "ApproximateBayesianComputation.gaussian_kernel",
            "title": "Gaussian kernel"
        },
        {
            "location": "/sec/euclideandist/",
            "text": "Weigthed Euclidean distance function\n\n\n#\n\n\nApproximateBayesianComputation.euclidean_dist\n \u2014 \nFunction\n.\n\n\neuclidean_dist(s_star::Vector, s::Vector, w::Vector)\n\n\n\n\n\nThe (weigthed) Euclidean distance function.",
            "title": "Weigthed Euclidena distance"
        },
        {
            "location": "/sec/euclideandist/#weigthed-euclidean-distance-function",
            "text": "#  ApproximateBayesianComputation.euclidean_dist  \u2014  Function .  euclidean_dist(s_star::Vector, s::Vector, w::Vector)  The (weigthed) Euclidean distance function.",
            "title": "Weigthed Euclidean distance function"
        },
        {
            "location": "/sec/gaussiankerneldist/",
            "text": "Gaussian kernel\n\n\n#\n\n\nApproximateBayesianComputation.gaussian_kernel\n \u2014 \nFunction\n.\n\n\ngaussian_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)\n\n\n\n\n\nThe Gaussian kernel function.",
            "title": "Gaussian kernel distance"
        },
        {
            "location": "/sec/gaussiankerneldist/#gaussian-kernel",
            "text": "#  ApproximateBayesianComputation.gaussian_kernel  \u2014  Function .  gaussian_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)  The Gaussian kernel function.",
            "title": "Gaussian kernel"
        },
        {
            "location": "/sec/quantint/",
            "text": "Quantile interval\n\n\n#\n\n\nApproximateBayesianComputation.quantile_interval\n \u2014 \nFunction\n.\n\n\nquantile_interval(data::Matrix, lower::Real=2.5,upper::Real=97.5,  print_on::Bool = false)\n\n\n\n\n\nComputes posterior quantile intervals, 2.5th and 97.5th quantiles as default.\n\n\nquantile_interval\n(\ndata\n:\n:Matrix\n;\n \nlower\n:\n:Real\n=\n2\n.5\n,\nupper\n:\n:Real\n=\n97\n.5\n,\n \nprint_on\n:\n:Bool\n \n=\n \nfalse\n)\n\n\n\n\n\n\nComputes posterior quantile intervals, 2.5th and 97.5th quantiles as default.",
            "title": "Quantile intervals"
        },
        {
            "location": "/sec/quantint/#quantile-interval",
            "text": "#  ApproximateBayesianComputation.quantile_interval  \u2014  Function .  quantile_interval(data::Matrix, lower::Real=2.5,upper::Real=97.5,  print_on::Bool = false)  Computes posterior quantile intervals, 2.5th and 97.5th quantiles as default.  quantile_interval ( data : :Matrix ;   lower : :Real = 2 .5 , upper : :Real = 97 .5 ,   print_on : :Bool   =   false )   Computes posterior quantile intervals, 2.5th and 97.5th quantiles as default.",
            "title": "Quantile interval"
        },
        {
            "location": "/sec/loss/",
            "text": "Loss\n\n\n#\n\n\nApproximateBayesianComputation.loss\n \u2014 \nFunction\n.\n\n\nloss(theta_true::Vector, theta_est::Vector)\n\n\n\n\n\nComputes the loss for the parameter estimations.\n\n\nloss(theta_true::Real, theta_est::Real)\n\n\n\n\n\nComputes the loss for the parameter estimations.",
            "title": "Loss"
        },
        {
            "location": "/sec/loss/#loss",
            "text": "#  ApproximateBayesianComputation.loss  \u2014  Function .  loss(theta_true::Vector, theta_est::Vector)  Computes the loss for the parameter estimations.  loss(theta_true::Real, theta_est::Real)  Computes the loss for the parameter estimations.",
            "title": "Loss"
        }
    ]
}