{
    "docs": [
        {
            "location": "/",
            "text": "ApproximateBayesianComputation.jl\n\n\nThis package contains some Approximate Bayesian computation algorithms.\n\n\nAlgorithms:\n\n\n\n\nABC rejection sampling (ABC-RS)\n\n\nABC Markov chain Monte Carlo (ABC-MCMC)\n\n\nABC population Monte Carlo (ABC-PMC)\n\n\n\n\nKernels:\n\n\n\n\nUniform\n\n\nGaussian\n\n\n\n\nDistance function(s):\n\n\n\n\n(Weighted) Euclidean distance\n\n\nGaussian kernel distance",
            "title": "Introduction"
        },
        {
            "location": "/#approximatebayesiancomputationjl",
            "text": "This package contains some Approximate Bayesian computation algorithms.  Algorithms:   ABC rejection sampling (ABC-RS)  ABC Markov chain Monte Carlo (ABC-MCMC)  ABC population Monte Carlo (ABC-PMC)   Kernels:   Uniform  Gaussian   Distance function(s):   (Weighted) Euclidean distance  Gaussian kernel distance",
            "title": "ApproximateBayesianComputation.jl"
        },
        {
            "location": "/examples/ex1/",
            "text": "Simple example\n\n\nLet us use the  ABC rejection sampling algorithm to learn the mean for a Normal distribution with known standard deviation, where the prior for the unknown mean is a Normal distibution.\n\n\nLoad packages.\n\n\njulia\n>\n \nusing\n \nApproximateBayesianComputation\n\n\njulia\n>\n \nusing\n \nDistributions\n\n\n\n\n\n\nSet parameters for data model.\n\n\njulia\n>\n \n\u03bc\n \n=\n \n0\n \n# true value for the mean, the parameter that  we want to estimate\n\n\njulia\n>\n \n\u03c3\n \n=\n \n1\n \n# known standard deviation\n\n\njulia\n>\n \nn\n \n=\n \n100\n \n# nbr of observations\n\n\n\n\n\n\nGenerate some data\n\n\njulia\n>\n \ny\n \n=\n \nrand\n(\nNormal\n(\n\u03bc\n,\n\u03c3\n),\n100\n)\n \n# generate some data\n\n\n\n\n\n\nSet prior distibution. The prior is a normal distribution with \u03bc = 0.1, and \u03c3 = 1\n\n\njulia\n>\n \nprior\n \n=\n \nNormal\n(\n0.1\n,\n \n1\n)\n\n\n\n\n\n\nDefine the functions needed for the ABC-RS algorithm.\n\n\njulia\n>\n \nsample_from_prior\n()\n \n=\n \nrand\n(\nprior\n)\n \n# function to sample from the prior\n\n\njulia\n>\n \ngenerate_data\n(\n\u03bc\n)\n \n=\n \nrand\n(\nNormal\n(\n\u03bc\n[\n1\n],\n\u03c3\n),\nn\n)\n \n# function to generate data\n\n\njulia\n>\n \ncalc_summary\n(\ny_star\n,\ny\n)\n \n=\n \n[\nmean\n(\ny_star\n);\n \nstd\n(\ny_star\n)]\n  \n# the summary statistics\n\n\njulia\n>\n \n\u03c1\n(\ns_star\n,\n \ns\n)\n \n=\n \neuclidean_dist\n(\ns_star\n,\n \ns\n,\n \nones\n(\n2\n))\n \n# distance function\n\n\n\n\n\n\nSet up the ABC-RS problem.\n\n\njulia\n>\n \nproblem\n \n=\n \nABCRS\n(\n10\n^\n6\n,\n \n0.01\n,\n \nData\n(\ny\n),\n \n1\n,\n \ncores\n \n=\n \n1\n,\n \nprint_interval\n \n=\n \n10\n^\n5\n)\n\n\n\n\n\n\nRun ABC-RS.\n\n\njulia\n>\n \napprox_posterior_samples\n \n=\n \nsample\n(\nproblem\n,\n\n                                         \nsample_from_prior\n,\n\n                                         \ngenerate_data\n,\n\n                                         \ncalc_summary\n,\n\n                                         \n\u03c1\n)\n\n\n\n\n\n\nCheck posterior quantile interval.\n\n\njulia\n>\n \nposterior_quantile_interval\n \n=\n \nquantile_interval\n(\napprox_posterior_samples\n)",
            "title": "Simple example"
        },
        {
            "location": "/examples/ex1/#simple-example",
            "text": "Let us use the  ABC rejection sampling algorithm to learn the mean for a Normal distribution with known standard deviation, where the prior for the unknown mean is a Normal distibution.  Load packages.  julia >   using   ApproximateBayesianComputation  julia >   using   Distributions   Set parameters for data model.  julia >   \u03bc   =   0   # true value for the mean, the parameter that  we want to estimate  julia >   \u03c3   =   1   # known standard deviation  julia >   n   =   100   # nbr of observations   Generate some data  julia >   y   =   rand ( Normal ( \u03bc , \u03c3 ), 100 )   # generate some data   Set prior distibution. The prior is a normal distribution with \u03bc = 0.1, and \u03c3 = 1  julia >   prior   =   Normal ( 0.1 ,   1 )   Define the functions needed for the ABC-RS algorithm.  julia >   sample_from_prior ()   =   rand ( prior )   # function to sample from the prior  julia >   generate_data ( \u03bc )   =   rand ( Normal ( \u03bc [ 1 ], \u03c3 ), n )   # function to generate data  julia >   calc_summary ( y_star , y )   =   [ mean ( y_star );   std ( y_star )]    # the summary statistics  julia >   \u03c1 ( s_star ,   s )   =   euclidean_dist ( s_star ,   s ,   ones ( 2 ))   # distance function   Set up the ABC-RS problem.  julia >   problem   =   ABCRS ( 10 ^ 6 ,   0.01 ,   Data ( y ),   1 ,   cores   =   1 ,   print_interval   =   10 ^ 5 )   Run ABC-RS.  julia >   approx_posterior_samples   =   sample ( problem , \n                                          sample_from_prior , \n                                          generate_data , \n                                          calc_summary , \n                                          \u03c1 )   Check posterior quantile interval.  julia >   posterior_quantile_interval   =   quantile_interval ( approx_posterior_samples )",
            "title": "Simple example"
        },
        {
            "location": "/sec/abcrs/",
            "text": "ABC rejection sampling\n\n\nABC-RS object.\n\n\n#\n\n\nApproximateBayesianComputation.ABCRS\n \u2014 \nType\n.\n\n\nType for defining a problem for the ABC-RS algorithm\n\n\nParameters:\n\n\n\n\nN::Integer\n nbr of iterations\n\n\n\u03f5::Real\n threshold\n\n\ndata::Data\n data\n\n\ndim_unknown::Integer\n nbr of unknown parameters\n\n\ncores::Integer\n nbr of course (default value 1)\n\n\nprint_interval::Integer\n print state of algorithm at every \nprint_interval\nth iteration (default value 1000)",
            "title": "ABC-RS"
        },
        {
            "location": "/sec/abcrs/#abc-rejection-sampling",
            "text": "ABC-RS object.  #  ApproximateBayesianComputation.ABCRS  \u2014  Type .  Type for defining a problem for the ABC-RS algorithm  Parameters:   N::Integer  nbr of iterations  \u03f5::Real  threshold  data::Data  data  dim_unknown::Integer  nbr of unknown parameters  cores::Integer  nbr of course (default value 1)  print_interval::Integer  print state of algorithm at every  print_interval th iteration (default value 1000)",
            "title": "ABC rejection sampling"
        },
        {
            "location": "/sec/abcmcmc/",
            "text": "ABC Markov chain Monte Carlo\n\n\nABC-MCMC object.\n\n\n#\n\n\nApproximateBayesianComputation.ABCMCMC\n \u2014 \nType\n.\n\n\nType for defining a problem for the ABC-MCMC algorithm\n\n\nParameters:\n\n\n\n\nN::Integer\n nbr of iterations\n\n\nburn_in::Integer\n length for burn-in\n\n\n\u03f5_seq::Vector\n sequence of threshold values\n\n\ndim_unknown::Integer\n nbr of unknown parameters\n\n\n\u03b8_start::Vector\n start value for chain\n\n\ntransformation::String\n transformation for proposal distribution: none/log/\n\n\ndata::Data\n data\n\n\nadaptive_update::AdaptationAlgorithm\n adaptive updating algorithm for the proposal distribtuion\n\n\nalgorithm_type::String\n type of ABC algorithm (original or general, default value original)\n\n\nprint_interval::Integer\n print interval for stats of algorithm (default value 1000)\n\n\n\n\n\n\nAdaptive tuning of the proposal distrbution\n\n\n#\n\n\nApproximateBayesianComputation.FixedKernel\n \u2014 \nType\n.\n\n\nFixedKernel\n\n\n\n\n\nFixed proposal distribution.\n\n\nParameters:\n\n\n\n\nCov::Array{Real}\n covaraince matrix\n\n\n\n\n#\n\n\nApproximateBayesianComputation.AMUpdate\n \u2014 \nType\n.\n\n\nAMUpdate\n\n\n\n\n\nAdaptive tuning of the proposal distribution. Sources: \nA tutorial on adaptive MCMC\n \nhttps://link.springer.com/article/10.1007/s11222-008-9110-y\n, and \nExploring the common concepts of adaptive MCMC and Covariance Matrix Adaptation schemes\n \nhttp://drops.dagstuhl.de/opus/volltexte/2010/2813/pdf/10361.MuellerChristian.Paper.2813.pdf\n\n\nParameters:\n\n\n\n\nC_0::Array{Real}\n\n\nr_cov_m::Real\n\n\ngamma_0::Real\n\n\nk::Real\n\n\nt_0::Integer",
            "title": "ABC-MCMC"
        },
        {
            "location": "/sec/abcmcmc/#abc-markov-chain-monte-carlo",
            "text": "ABC-MCMC object.  #  ApproximateBayesianComputation.ABCMCMC  \u2014  Type .  Type for defining a problem for the ABC-MCMC algorithm  Parameters:   N::Integer  nbr of iterations  burn_in::Integer  length for burn-in  \u03f5_seq::Vector  sequence of threshold values  dim_unknown::Integer  nbr of unknown parameters  \u03b8_start::Vector  start value for chain  transformation::String  transformation for proposal distribution: none/log/  data::Data  data  adaptive_update::AdaptationAlgorithm  adaptive updating algorithm for the proposal distribtuion  algorithm_type::String  type of ABC algorithm (original or general, default value original)  print_interval::Integer  print interval for stats of algorithm (default value 1000)",
            "title": "ABC Markov chain Monte Carlo"
        },
        {
            "location": "/sec/abcmcmc/#adaptive-tuning-of-the-proposal-distrbution",
            "text": "#  ApproximateBayesianComputation.FixedKernel  \u2014  Type .  FixedKernel  Fixed proposal distribution.  Parameters:   Cov::Array{Real}  covaraince matrix   #  ApproximateBayesianComputation.AMUpdate  \u2014  Type .  AMUpdate  Adaptive tuning of the proposal distribution. Sources:  A tutorial on adaptive MCMC   https://link.springer.com/article/10.1007/s11222-008-9110-y , and  Exploring the common concepts of adaptive MCMC and Covariance Matrix Adaptation schemes   http://drops.dagstuhl.de/opus/volltexte/2010/2813/pdf/10361.MuellerChristian.Paper.2813.pdf  Parameters:   C_0::Array{Real}  r_cov_m::Real  gamma_0::Real  k::Real  t_0::Integer",
            "title": "Adaptive tuning of the proposal distrbution"
        },
        {
            "location": "/sec/abcpmc/",
            "text": "ABC population Monte Carlo\n\n\nABC-PMC object.\n\n\n#\n\n\nApproximateBayesianComputation.ABCPMC\n \u2014 \nType\n.\n\n\nType for defining a problem for the ABC-PMC algorithm\n\n\nParameters:\n\n\n\n\nT::Integer\n nbr of iterations\n\n\nN::Integer\n nbr of samples in the population\n\n\n\u03f5::Real\n start threshold\n\n\ndata::Data\n data\n\n\ndim_unknown::Integer\n nbr of unknown parameters\n\n\ncores::Integer\n nbr of course (default value 1)\n\n\nprint_interval::Integer\n print state of algorithm at every \nprint_interval\nth iteration (default value 1000)",
            "title": "ABC-PMC"
        },
        {
            "location": "/sec/abcpmc/#abc-population-monte-carlo",
            "text": "ABC-PMC object.  #  ApproximateBayesianComputation.ABCPMC  \u2014  Type .  Type for defining a problem for the ABC-PMC algorithm  Parameters:   T::Integer  nbr of iterations  N::Integer  nbr of samples in the population  \u03f5::Real  start threshold  data::Data  data  dim_unknown::Integer  nbr of unknown parameters  cores::Integer  nbr of course (default value 1)  print_interval::Integer  print state of algorithm at every  print_interval th iteration (default value 1000)",
            "title": "ABC population Monte Carlo"
        },
        {
            "location": "/sec/sample/",
            "text": "Sample\n\n\nsample\n is a multimethod function with one implementation for each algorithm.\n\n\nSample method for \nABCRS\n.\n\n\n#\n\n\nStatsBase.sample\n \u2014 \nMethod\n.\n\n\nsample(problem::ABCRS,\n       sample_from_prior::Function,\n       generate_data::Function,\n       calc_summary::Function,\n       \u03c1::Function)\n\n\n\n\n\nSample from the approximate posterior distribtuion using ABC rejection sampling.\n\n\nInput:\n\n\n\n\nproblem::ABCRS\n problem\n\n\nsample_from_prior::Function\n function to sample from the prior\n\n\ngenerate_data::Function\n function to generate data from the model\n\n\ncalc_summary::Function\n function to calculate summary statistics\n\n\n\u03c1::Function\n the distance function\n\n\n\n\nOutput:\n\n\n\n\nsamples_approx_posterior::Matrix\n samples from the approxiamte posterior\n\n\n\n\nSample method for \nABCMCMC\n.\n\n\n#\n\n\nStatsBase.sample\n \u2014 \nMethod\n.\n\n\nsample\n(\nproblem\n:\n:ABCMCMC\n,\n\n       \nsample_from_prior\n:\n:Function\n,\n\n       \nevaluate_prior\n:\n:Function\n,\n\n       \ngenerate_data\n:\n:Function\n,\n\n       \ncalc_summary\n:\n:Function\n,\n\n       \n\u03c1\n:\n:Function\n;\n\n       \nkernel\n:\n:Function\n \n=\n \nuniform_kernel\n)\n\n\n\n\n\n\nSample from the approximate posterior distribtuion using ABC-MCMC.\n\n\nInput:\n\n\n\n\nproblem::ABCMCMC\n problem\n\n\nsample_from_prior::Function\n function to sample from the prior\n\n\nevaluate_prior::Function\n evaluate the prior\n\n\ngenerate_data::Function\n function to generate data\n\n\ncalc_summary::Function\n function to calculate summary statistics\n\n\n\u03c1::Function\n the distance function\n\n\nkernel::Function\n the kernel function\n\n\n\n\nOutput:\n\n\n\n\nchain::Matrix\n the chain genrated by the ABC-MCMC algorithm\n\n\n\n\nSample method for \nABCPMC\n.\n\n\n#\n\n\nStatsBase.sample\n \u2014 \nMethod\n.\n\n\nsample(problem::ABCPMC,\n       sample_from_prior::Function,\n       evaluate_prior::Function,\n       generate_data::Function,\n       calc_summary::Function,\n       \u03c1::Function)\n\n\n\n\n\nSample from the approximate posterior distribtuion using PMC-ABC algorithm described in \nAdaptive approximate Bayesian computation\n \nhttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.313.3573&rep=rep1&type=pdf\n.\n\n\nInput:\n\n\n\n\nproblem::ABCPMC\n problem\n\n\nsample_from_prior::Function\n function to sample from the prior\n\n\ngenerate_data::Function\n function to generate data from the model\n\n\ncalc_summary::Function\n function to calculate summary statistics\n\n\n\u03c1::Function\n the distance function\n\n\n\n\nOutput:\n\n\n\n\n\u03b8_pop::Matrix\n last population",
            "title": "sample"
        },
        {
            "location": "/sec/sample/#sample",
            "text": "sample  is a multimethod function with one implementation for each algorithm.  Sample method for  ABCRS .  #  StatsBase.sample  \u2014  Method .  sample(problem::ABCRS,\n       sample_from_prior::Function,\n       generate_data::Function,\n       calc_summary::Function,\n       \u03c1::Function)  Sample from the approximate posterior distribtuion using ABC rejection sampling.  Input:   problem::ABCRS  problem  sample_from_prior::Function  function to sample from the prior  generate_data::Function  function to generate data from the model  calc_summary::Function  function to calculate summary statistics  \u03c1::Function  the distance function   Output:   samples_approx_posterior::Matrix  samples from the approxiamte posterior   Sample method for  ABCMCMC .  #  StatsBase.sample  \u2014  Method .  sample ( problem : :ABCMCMC , \n        sample_from_prior : :Function , \n        evaluate_prior : :Function , \n        generate_data : :Function , \n        calc_summary : :Function , \n        \u03c1 : :Function ; \n        kernel : :Function   =   uniform_kernel )   Sample from the approximate posterior distribtuion using ABC-MCMC.  Input:   problem::ABCMCMC  problem  sample_from_prior::Function  function to sample from the prior  evaluate_prior::Function  evaluate the prior  generate_data::Function  function to generate data  calc_summary::Function  function to calculate summary statistics  \u03c1::Function  the distance function  kernel::Function  the kernel function   Output:   chain::Matrix  the chain genrated by the ABC-MCMC algorithm   Sample method for  ABCPMC .  #  StatsBase.sample  \u2014  Method .  sample(problem::ABCPMC,\n       sample_from_prior::Function,\n       evaluate_prior::Function,\n       generate_data::Function,\n       calc_summary::Function,\n       \u03c1::Function)  Sample from the approximate posterior distribtuion using PMC-ABC algorithm described in  Adaptive approximate Bayesian computation   http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.313.3573&rep=rep1&type=pdf .  Input:   problem::ABCPMC  problem  sample_from_prior::Function  function to sample from the prior  generate_data::Function  function to generate data from the model  calc_summary::Function  function to calculate summary statistics  \u03c1::Function  the distance function   Output:   \u03b8_pop::Matrix  last population",
            "title": "Sample"
        },
        {
            "location": "/sec/uniformkernel/",
            "text": "Uniform kernel\n\n\n#\n\n\nApproximateBayesianComputation.uniform_kernel\n \u2014 \nFunction\n.\n\n\nuniform_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)\n\n\n\n\n\nThe Uniform kernel function follows\n\n\n\n\n\nK^{\\text{Uniform}}_{\\epsilon}(\\rho(x,y)) = \\begin{cases}\n        1, \\text{if}, \\rho(x,y) \\le \\epsilon,\n        \\\\\n        0, \\text{otherwise}.\n        \\end{cases}\n\n\n\n\n\nWhere \u03f5 is the threshold and \u03c1 the distance function.",
            "title": "Uniform kernel"
        },
        {
            "location": "/sec/uniformkernel/#uniform-kernel",
            "text": "#  ApproximateBayesianComputation.uniform_kernel  \u2014  Function .  uniform_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)  The Uniform kernel function follows   \nK^{\\text{Uniform}}_{\\epsilon}(\\rho(x,y)) = \\begin{cases}\n        1, \\text{if}, \\rho(x,y) \\le \\epsilon,\n        \\\\\n        0, \\text{otherwise}.\n        \\end{cases}   Where \u03f5 is the threshold and \u03c1 the distance function.",
            "title": "Uniform kernel"
        },
        {
            "location": "/sec/gaussiankernel/",
            "text": "Gaussian kernel\n\n\n#\n\n\nApproximateBayesianComputation.gaussian_kernel\n \u2014 \nFunction\n.\n\n\ngaussian_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)\n\n\n\n\n\nThe Gaussian kernel function follows\n\n\n\n\n\nK^{\\text{Gaussian}}_{\\epsilon}(x,y) \\propto \\exp(-\\rho(x,y)/2\\epsilon^2).\n\n\n\n\n\nWhere \u03f5 is the threshold and \u03c1 the distance function.\n\n\nThe distance function \u03c1 can be set to \ngaussian_kernel_dist\n where the summary statistics are weigthed according to a covariance matrix. But other distance functions can also be used.",
            "title": "Gaussian kernel"
        },
        {
            "location": "/sec/gaussiankernel/#gaussian-kernel",
            "text": "#  ApproximateBayesianComputation.gaussian_kernel  \u2014  Function .  gaussian_kernel(s_star::Vector, s::Vector, \u03f5::Real, \u03c1::Function)  The Gaussian kernel function follows   \nK^{\\text{Gaussian}}_{\\epsilon}(x,y) \\propto \\exp(-\\rho(x,y)/2\\epsilon^2).   Where \u03f5 is the threshold and \u03c1 the distance function.  The distance function \u03c1 can be set to  gaussian_kernel_dist  where the summary statistics are weigthed according to a covariance matrix. But other distance functions can also be used.",
            "title": "Gaussian kernel"
        },
        {
            "location": "/sec/euclideandist/",
            "text": "Weighted Euclidean distance function\n\n\n#\n\n\nApproximateBayesianComputation.euclidean_dist\n \u2014 \nFunction\n.\n\n\neuclidean_dist(s_star::Vector, s::Vector, w::Vector)\n\n\n\n\n\nThe (weigthed) Euclidean distance function, computed as\n\n\n\n\n\n\u03c1_{\\text{Euclidean}}(x, y ; w) = (x-y)^{T}\\text{diag}(1/w^2)(x-y).\n\n\n\n\n\nWhere w is the weighting matrix.",
            "title": "Weigthed Euclidena distance"
        },
        {
            "location": "/sec/euclideandist/#weighted-euclidean-distance-function",
            "text": "#  ApproximateBayesianComputation.euclidean_dist  \u2014  Function .  euclidean_dist(s_star::Vector, s::Vector, w::Vector)  The (weigthed) Euclidean distance function, computed as   \n\u03c1_{\\text{Euclidean}}(x, y ; w) = (x-y)^{T}\\text{diag}(1/w^2)(x-y).   Where w is the weighting matrix.",
            "title": "Weighted Euclidean distance function"
        },
        {
            "location": "/sec/gaussiankerneldist/",
            "text": "Gaussian kernel distance function\n\n\n#\n\n\nApproximateBayesianComputation.gaussian_kernel_dist\n \u2014 \nFunction\n.\n\n\ngaussian_kernel_dist(s_star::Vector, s::Vector, w::Vector)\n\n\n\n\n\nThe Gaussian kernel distance function, computed as\n\n\n\n\n\n\u03c1_{\\text{Gaussian}}(x, y ; \\Sigma) = (x-y)^{T}\\Sigma^{-1}(x-y).\n\n\n\n\n\nWhere \u03a3 is the covariance matrix.",
            "title": "Gaussian kernel distance"
        },
        {
            "location": "/sec/gaussiankerneldist/#gaussian-kernel-distance-function",
            "text": "#  ApproximateBayesianComputation.gaussian_kernel_dist  \u2014  Function .  gaussian_kernel_dist(s_star::Vector, s::Vector, w::Vector)  The Gaussian kernel distance function, computed as   \n\u03c1_{\\text{Gaussian}}(x, y ; \\Sigma) = (x-y)^{T}\\Sigma^{-1}(x-y).   Where \u03a3 is the covariance matrix.",
            "title": "Gaussian kernel distance function"
        },
        {
            "location": "/sec/quantint/",
            "text": "Quantile interval\n\n\n#\n\n\nApproximateBayesianComputation.quantile_interval\n \u2014 \nFunction\n.\n\n\nquantile_interval(data::Matrix, lower::Real=2.5,upper::Real=97.5,  print_on::Bool = false)\n\n\n\n\n\nComputes posterior quantile intervals, 2.5th and 97.5th quantiles as default.\n\n\nquantile_interval\n(\ndata\n:\n:Matrix\n;\n \nlower\n:\n:Real\n=\n2\n.5\n,\nupper\n:\n:Real\n=\n97\n.5\n,\n \nprint_on\n:\n:Bool\n \n=\n \nfalse\n)\n\n\n\n\n\n\nComputes posterior quantile intervals, 2.5th and 97.5th quantiles as default.",
            "title": "Quantile intervals"
        },
        {
            "location": "/sec/quantint/#quantile-interval",
            "text": "#  ApproximateBayesianComputation.quantile_interval  \u2014  Function .  quantile_interval(data::Matrix, lower::Real=2.5,upper::Real=97.5,  print_on::Bool = false)  Computes posterior quantile intervals, 2.5th and 97.5th quantiles as default.  quantile_interval ( data : :Matrix ;   lower : :Real = 2 .5 , upper : :Real = 97 .5 ,   print_on : :Bool   =   false )   Computes posterior quantile intervals, 2.5th and 97.5th quantiles as default.",
            "title": "Quantile interval"
        },
        {
            "location": "/sec/loss/",
            "text": "Loss\n\n\n#\n\n\nApproximateBayesianComputation.loss\n \u2014 \nFunction\n.\n\n\nloss(theta_true::Vector, theta_est::Vector)\n\n\n\n\n\nComputes the loss for the parameter estimations.\n\n\nloss(theta_true::Real, theta_est::Real)\n\n\n\n\n\nComputes the loss for the parameter estimation.",
            "title": "Loss"
        },
        {
            "location": "/sec/loss/#loss",
            "text": "#  ApproximateBayesianComputation.loss  \u2014  Function .  loss(theta_true::Vector, theta_est::Vector)  Computes the loss for the parameter estimations.  loss(theta_true::Real, theta_est::Real)  Computes the loss for the parameter estimation.",
            "title": "Loss"
        }
    ]
}